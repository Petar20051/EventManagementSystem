﻿@using EventManagementSystem.Core.Models.Account
@using EventManagementSystem.Infrastructure.Entities
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model ManageProfileViewModel

<h2 class="text-center">Manage Profile</h2>


<div class="profile-info">
    <p>
        <strong>Username:</strong> @Model.UserName.Substring(0, Model.UserName.IndexOf('@'))
    </p>

    <p><strong>Email:</strong> @Model.UserName</p>
    <p><strong>Sponsored Amount:</strong> @Model?.SponsoredAmount.ToString("C")</p>
    <p><strong>Sponsorship Tier:</strong> @Model?.SponsorshipTier?.ToString()</p>
</div>

<h3>Tickets</h3>
@if (Model?.Tickets != null && Model.Tickets.Any())
{
    <ul>
            <li>
                <form action="@Url.Action("MyTickets", "Ticket")" method="get" style="display:inline;">
                    <button type="submit" class="btn btn-primary">
                      My Tickets
                    </button>
                </form>
            </li>
    </ul>
}
else
{
    <p>You have no tickets.</p>
}
<h3>Update Profile Information</h3>

<div>
    <button type="button" class="btn btn-secondary" onclick="window.location.href='@Url.Action("Index", "ChangePassword")'">Change Password</button>
</div>
@if (User.Identity.IsAuthenticated)
{
    var user = await UserManager.GetUserAsync(User);
    if (user != null && !await UserManager.IsInRoleAsync(user, "Organizer"))
    {
        <h3>Become an Organizer</h3>
        <form asp-action="BecomeOrganizer" method="post">
            <button type="submit" class="btn btn-primary">Become Organizer</button>
        </form>
    }
    else
    {
        <h3>Organizer Status:</h3>
        <p>You are already an organizer.</p>
    }
}
else
{
    <p>You need to log in to become an organizer.</p>
}

<!-- TempData Messages -->
@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}


